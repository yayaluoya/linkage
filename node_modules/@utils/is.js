"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUrl = exports.isClient = exports.isServer = exports.isMap = exports.isElement = exports.isWindow = exports.isArray = exports.isRegExp = exports.isBoolean = exports.isFunction = exports.isString = exports.isPromise = exports.isNumber = exports.isNullOrUnDef = exports.isNullAndUnDef = exports.isNull = exports.isDate = exports.isEmpty = exports.isObject = exports.isUnDef = exports.isDef = exports.is = void 0;
/**
 * 原始toString方法
 */
const toString = Object.prototype.toString;
/**
 * 是否是某个js默认数据类型
 * @param val
 * @param type
 * @returns
 */
function is(val, type) {
    return toString.call(val) === `[object ${type}]`;
}
exports.is = is;
/** 是否定义 */
function isDef(val) {
    return typeof val !== 'undefined';
}
exports.isDef = isDef;
/** 是否未定义 */
function isUnDef(val) {
    return !isDef(val);
}
exports.isUnDef = isUnDef;
/**
 * 是否是一个对象
 * @param val
 * @returns
 */
function isObject(val) {
    return val !== null && is(val, 'Object');
}
exports.isObject = isObject;
/**
 * 是否为空，必须有值
 * @param val
 * @returns
 */
function isEmpty(val) {
    if (isArray(val) || isString(val)) {
        return val.length === 0;
    }
    if (val instanceof Map || val instanceof Set) {
        return val.size === 0;
    }
    if (isObject(val)) {
        return Object.keys(val).length === 0;
    }
    return false;
}
exports.isEmpty = isEmpty;
function isDate(val) {
    return is(val, 'Date');
}
exports.isDate = isDate;
function isNull(val) {
    return val === null;
}
exports.isNull = isNull;
/**
 * 是否是null和未定义
 * @param val
 * @returns
 */
function isNullAndUnDef(val) {
    return isUnDef(val) && isNull(val);
}
exports.isNullAndUnDef = isNullAndUnDef;
/**
 * 是否是null或未定义
 * @param val
 * @returns
 */
function isNullOrUnDef(val) {
    return isUnDef(val) || isNull(val);
}
exports.isNullOrUnDef = isNullOrUnDef;
function isNumber(val) {
    return is(val, 'Number');
}
exports.isNumber = isNumber;
function isPromise(val) {
    return is(val, 'Promise') && isObject(val) && isFunction(val.then) && isFunction(val.catch);
}
exports.isPromise = isPromise;
function isString(val) {
    return is(val, 'String');
}
exports.isString = isString;
function isFunction(val) {
    return typeof val === 'function';
}
exports.isFunction = isFunction;
function isBoolean(val) {
    return is(val, 'Boolean');
}
exports.isBoolean = isBoolean;
function isRegExp(val) {
    return is(val, 'RegExp');
}
exports.isRegExp = isRegExp;
function isArray(val) {
    return val && Array.isArray(val);
}
exports.isArray = isArray;
function isWindow(val) {
    return typeof window !== 'undefined' && is(val, 'Window');
}
exports.isWindow = isWindow;
function isElement(val) {
    return isObject(val) && !!val.tagName;
}
exports.isElement = isElement;
function isMap(val) {
    return is(val, 'Map');
}
exports.isMap = isMap;
exports.isServer = typeof window === 'undefined';
exports.isClient = !exports.isServer;
var strRegex = '^((https|http|ftp)://)?(//)?' //(https或http或ftp):// 可有可无，也可以用//开头
    + '(([\\w_!~*\'()\\.&=+$%-]+: )?[\\w_!~*\'()\\.&=+$%-]+@)?' //ftp的user@  可有可无
    + '(([0-9]{1,3}\\.){3}[0-9]{1,3}' // IP形式的URL- 3位数字.3位数字.3位数字.3位数字
    + '|' // 允许IP和DOMAIN（域名） 
    + '(localhost)|' //匹配localhost
    + '([\\w_!~*\'()-]+\\.)*' // 域名- 至少一个[英文或数字_!~*\'()-]加上.
    + '\\w+\\.' // 一级域名 -英文或数字  加上.
    + '[a-zA-Z]{1,6})' // 顶级域名- 1-6位英文 
    + '(:[0-9]{1,5})?' // 端口- :80 ,1-5位数字
    + '((/?)|' // url无参数结尾 - 斜杆或这没有
    + '(/[\\w_!~*\'()\\.;?:@&=+$,%#-]+)+/?)$'; //请求参数结尾- 英文或数字和[]内的各种字符
const urlReg = new RegExp(strRegex);
/**
 * 是否是一个url
 * @param path
 * @returns
 */
function isUrl(path) {
    return urlReg.test(path);
}
exports.isUrl = isUrl;
