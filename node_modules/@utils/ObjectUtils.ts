/**
 * 对象工具类
 */
export class ObjectUtils {
    /**
     * 获取一个对象的属性
     * @param obj
     * @param key 
     */
    static getPro(obj: object, key: string | { (i: string): boolean } | RegExp): any {
        if (typeof obj != 'object') { return; }
        let is;
        for (let i in obj) {
            is = false;
            switch (true) {
                case typeof key == 'string':
                    is = i == key;
                    break;
                case typeof key == 'function':
                    is = (key as Function)(i);
                    break;
                case key instanceof RegExp:
                    is = (key as RegExp).test(i);
                    break;
            }
            //
            if (is) {
                return obj[i];
            }
        }
    }

    /**
     * 克隆一个对象
     * 采用序列化和反序列化的方式，function不会被克隆
     * @param _O 该对象
     */
    public static cloneObject<T>(_data: T): T {
        return JSON.parse(JSON.stringify(_data)) as T;
    }
}