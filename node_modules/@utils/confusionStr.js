"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.confusionStr = void 0;
const CryptoJS = __importStar(require("crypto-js"));
/**
 * 混淆字符串
 * @param _str
 * @returns
 */
function confusionStr(_str, _ifMd5 = true) {
    if (typeof _str !== 'string' || !_str) {
        return '';
    }
    let newStr = '';
    for (let i = 0; i < _str.length; i++) {
        newStr += String.fromCharCode(_str.charCodeAt(i) + i);
    }
    if (_ifMd5) {
        //这里不能直接用封装的加密工具，因为会有循环依赖的问题
        let srcs = CryptoJS.enc.Utf8.parse(_str);
        newStr = CryptoJS.MD5(srcs).toString();
    }
    return newStr;
}
exports.confusionStr = confusionStr;
